<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-07T12:19:00.428Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NHibernate的两种写法</title>
    <link href="http://yoursite.com/2017/11/07/NHibernate%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/07/NHibernate的两种写法/</id>
    <published>2017-11-07T12:18:15.000Z</published>
    <updated>2017-11-07T12:19:00.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-普通的链接，普通的增删改查，普通的代码"><a href="#一-普通的链接，普通的增删改查，普通的代码" class="headerlink" title="一.普通的链接，普通的增删改查，普通的代码"></a>一.普通的链接，普通的增删改查，普通的代码</h2><h3 id="1-建立新的项目，添加引用-NHibernate-MySql-Data"><a href="#1-建立新的项目，添加引用-NHibernate-MySql-Data" class="headerlink" title="1.建立新的项目，添加引用 NHibernate,MySql.Data"></a>1.建立新的项目，添加引用 NHibernate,MySql.Data</h3><h4 id="2-添加NHibernate配置"><a href="#2-添加NHibernate配置" class="headerlink" title="2.添加NHibernate配置"></a>2.添加NHibernate配置</h4><p>新建项，名为hibernate.cfg.xml，并添加以下内容,并在高级中复制到输出目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</div><div class="line">&lt;hibernate-configuration xmlns=&quot;urn:nhibernate-configuration-2.2&quot;&gt;</div><div class="line">  &lt;session-factory&gt;</div><div class="line">    &lt;property name=&quot;connection.provider&quot;&gt;NHibernate.Connection.DriverConnectionProvider&lt;/property&gt;</div><div class="line">    &lt;property name=&quot;dialect&quot;&gt;NHibernate.Dialect.MySQL5Dialect&lt;/property&gt;</div><div class="line">    &lt;property name=&quot;connection.driver_class&quot;&gt;NHibernate.Driver.MySqlDataDriver&lt;/property&gt;</div><div class="line">    &lt;!--使用什么数据库--&gt;</div><div class="line">    &lt;property name=&quot;connection.connection_string&quot;&gt;Server=localhost;Database=mygamedb;User ID=root;Password=root;&lt;/property&gt;</div><div class="line"></div><div class="line">    &lt;property name=&quot;show_sql&quot;&gt;true&lt;/property&gt;</div><div class="line">  &lt;/session-factory&gt;</div><div class="line">&lt;/hibernate-configuration&gt;</div></pre></td></tr></table></figure>
<h4 id="2-新建Model文件夹，Model下的类都是跟数据库的表做映射的，首先创建一个名为User的类，上代码"><a href="#2-新建Model文件夹，Model下的类都是跟数据库的表做映射的，首先创建一个名为User的类，上代码" class="headerlink" title="2.新建Model文件夹，Model下的类都是跟数据库的表做映射的，首先创建一个名为User的类，上代码"></a>2.新建Model文件夹，Model下的类都是跟数据库的表做映射的，首先创建一个名为User的类，上代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line"></div><div class="line">namespace Sikiedu.Model</div><div class="line">&#123;</div><div class="line">    public  class User</div><div class="line">    &#123;</div><div class="line">        public virtual int Id &#123; get; set; &#125;</div><div class="line">        public virtual string Username &#123; get; set; &#125;</div><div class="line">        public virtual string Password &#123; get; set; &#125;</div><div class="line">        public virtual DateTime Registerdate &#123; get; set; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-新建Mapping文件夹，并添加映射（把每一个表映射成类，然后利用类去创建对象，就可以像操作对象一样去操作数据库）"><a href="#3-新建Mapping文件夹，并添加映射（把每一个表映射成类，然后利用类去创建对象，就可以像操作对象一样去操作数据库）" class="headerlink" title="3.新建Mapping文件夹，并添加映射（把每一个表映射成类，然后利用类去创建对象，就可以像操作对象一样去操作数据库）"></a>3.新建Mapping文件夹，并添加映射（把每一个表映射成类，然后利用类去创建对象，就可以像操作对象一样去操作数据库）</h4><p>新建项，名为User.hbm.xml，在高级中，生成操作选择为嵌入的资源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</div><div class="line">&lt;hibernate-mapping xmlns=&quot;urn:nhibernate-mapping-2.2&quot;</div><div class="line">                   assembly=&quot;Sikiedu&quot;</div><div class="line">                   namespace=&quot;Sikiedu.Model&quot;&gt;</div><div class="line"></div><div class="line">  &lt;class name=&quot;User&quot; table=&quot;users&quot;&gt;</div><div class="line">    &lt;id name=&quot;Id&quot; column=&quot;id&quot; type=&quot;Int32&quot;&gt;</div><div class="line">      &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</div><div class="line">    &lt;/id&gt;</div><div class="line">    &lt;property name=&quot;Username&quot; column=&quot;username&quot; type=&quot;String&quot;&gt;&lt;/property&gt;</div><div class="line">    &lt;property name=&quot;Password&quot; column=&quot;password&quot; type=&quot;String&quot;&gt;&lt;/property&gt;</div><div class="line">    &lt;property name=&quot;Registerdate&quot; column=&quot;registerdate&quot; type=&quot;Date&quot;&gt;&lt;/property&gt;</div><div class="line">  &lt;/class&gt;</div><div class="line"></div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure></p>
<h3 id="4-增删改查操作，在Program中"><a href="#4-增删改查操作，在Program中" class="headerlink" title="4.增删改查操作，在Program中"></a>4.增删改查操作，在Program中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using NHibernate;</div><div class="line">using NHibernate.Cfg;</div><div class="line">using Sikiedu.Manager;</div><div class="line">using Sikiedu.Model;</div><div class="line">namespace Sikiedu</div><div class="line">&#123;</div><div class="line">    class Program</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            var configuraion = new Configuration();    </div><div class="line">            configuraion.Configure();      //解析nhibernate.cfg.xml</div><div class="line">            configuraion.AddAssembly(&quot;Sikiedu&quot;);//解析映射文件</div><div class="line"></div><div class="line">            ISessionFactory sessionFactory = null;</div><div class="line">            ISession session = null;</div><div class="line">            ITransaction transaction = null;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                sessionFactory = configuraion.BuildSessionFactory();   //会话工厂</div><div class="line">                session = sessionFactory.OpenSession(); //打开一个跟数据库的会话</div><div class="line"></div><div class="line">                //User user = new User()&#123;Username = &quot;dsslkdfh&quot; ,Password = &quot;123&quot;&#125;;   //添加用户</div><div class="line">                //session.Save(user);</div><div class="line"></div><div class="line">                //事务  操作的集合，若事务中有任务失败，已经成功的操作会回滚，剩下的也不会再进行操作</div><div class="line">                transaction = session.BeginTransaction();</div><div class="line">                transaction.Begin();</div><div class="line">            &#125;</div><div class="line">            catch (Exception e)</div><div class="line">            &#123;</div><div class="line"></div><div class="line">                Console.WriteLine(e);</div><div class="line">            &#125;</div><div class="line">            finally  //关闭顺序 ： 最后创建的 最先关闭</div><div class="line">            &#123;</div><div class="line">                if (transaction != null)</div><div class="line">                &#123;</div><div class="line">                    transaction.Dispose();</div><div class="line">                &#125;</div><div class="line">                if (session != null)</div><div class="line">                &#123;</div><div class="line">                    session.Close();</div><div class="line">                &#125;</div><div class="line">                if (sessionFactory != null)</div><div class="line">                &#123;</div><div class="line">                    sessionFactory.Close();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h3 id="2-添加NHibernate配置-1"><a href="#2-添加NHibernate配置-1" class="headerlink" title="2.添加NHibernate配置"></a>2.添加NHibernate配置</h3><h2 id="二-高级的连接，高级的增删改查，高级的代码"><a href="#二-高级的连接，高级的增删改查，高级的代码" class="headerlink" title="二.高级的连接，高级的增删改查，高级的代码"></a>二.高级的连接，高级的增删改查，高级的代码</h2><h3 id="1-写帮助类"><a href="#1-写帮助类" class="headerlink" title="1.写帮助类"></a>1.写帮助类</h3><p>不同的操作要写不同的session，所以我们如果重复写这段代码的话会很麻烦，所以添加一个帮助类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var configuraion = new Configuration();    </div><div class="line">            configuraion.Configure();      //解析nhibernate.cfg.xml</div><div class="line">            configuraion.AddAssembly(&quot;Sikiedu&quot;);//解析映射文件</div><div class="line"></div><div class="line">            ISessionFactory sessionFactory = null;</div></pre></td></tr></table></figure>
<h4 id="创建一个名为NHibernateHelper的类"><a href="#创建一个名为NHibernateHelper的类" class="headerlink" title="创建一个名为NHibernateHelper的类"></a>创建一个名为NHibernateHelper的类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using NHibernate;</div><div class="line">using NHibernate.Cfg;</div><div class="line"></div><div class="line">namespace Sikiedu</div><div class="line">&#123;</div><div class="line">    class NHibernateHelper</div><div class="line">    &#123;</div><div class="line"></div><div class="line">        private static ISessionFactory _sessionFactory;</div><div class="line"></div><div class="line">        private static ISessionFactory SessionFactory    //初始化</div><div class="line">        &#123;</div><div class="line">            get</div><div class="line">            &#123;</div><div class="line">                if (_sessionFactory == null)     //若未初始化，则初始化</div><div class="line">                &#123;</div><div class="line">                    var configuration = new Configuration();</div><div class="line">                    configuration.Configure();</div><div class="line">                    configuration.AddAssembly(&quot;Sikiedu&quot;);</div><div class="line"></div><div class="line">                    _sessionFactory = configuration.BuildSessionFactory();//只有在整个程序结束的时候才会关闭SessionFactory，</div><div class="line">                &#125;</div><div class="line">                return _sessionFactory;      //已初始化，则返回……</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static ISession OpenSession()     //打开session</div><div class="line">        &#123;</div><div class="line">            return SessionFactory.OpenSession();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-添加管理类"><a href="#2-添加管理类" class="headerlink" title="2.添加管理类"></a>2.添加管理类</h3><h4 id="1-新建Manager，添加一个名为IUserManager的接口，接口中定义了有哪些操作"><a href="#1-新建Manager，添加一个名为IUserManager的接口，接口中定义了有哪些操作" class="headerlink" title="1.新建Manager，添加一个名为IUserManager的接口，接口中定义了有哪些操作"></a>1.新建Manager，添加一个名为IUserManager的接口，接口中定义了有哪些操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using Sikiedu.Model;</div><div class="line">namespace Sikiedu.Manager</div><div class="line">&#123;</div><div class="line">    interface IUserManager</div><div class="line">    &#123;</div><div class="line">        void Add(User user);</div><div class="line">        void Update(User user);</div><div class="line">        void Remove(User user);</div><div class="line">        User GetById(int id);</div><div class="line">        User GetByUsername(string username);</div><div class="line">        ICollection&lt;User&gt; GetAllUsers();</div><div class="line">        bool VerifyUser(string username, string password);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-在Manager文件夹中新增名为UserManager的类，用来实现接口"><a href="#2-在Manager文件夹中新增名为UserManager的类，用来实现接口" class="headerlink" title="2.在Manager文件夹中新增名为UserManager的类，用来实现接口"></a>2.在Manager文件夹中新增名为UserManager的类，用来实现接口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using Sikiedu.Model;</div><div class="line">using NHibernate;</div><div class="line">using NHibernate.Criterion;</div><div class="line"></div><div class="line"></div><div class="line">namespace Sikiedu.Manager</div><div class="line">&#123;</div><div class="line">    class UserManager : IUserManager</div><div class="line">    &#123;</div><div class="line">        public void Add(User user)</div><div class="line">        &#123;</div><div class="line">            //ISession session = NHibernateHelper.OpenSession();</div><div class="line">            //session.Save(user);</div><div class="line">            //session.Dispose();</div><div class="line">            //对一些需要关闭的资源，using写法：</div><div class="line">            using (ISession session = NHibernateHelper.OpenSession())//using括号中写需要释放的资源，运行完后才会将session释放</div><div class="line">            &#123;</div><div class="line">                using (ITransaction transaction = session.BeginTransaction())//添加事务</div><div class="line">                &#123;</div><div class="line">                    session.Save(user);</div><div class="line">                    transaction.Commit();</div><div class="line">                &#125;               </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public ICollection&lt;User&gt; GetAllUsers()</div><div class="line">        &#123;</div><div class="line">            throw new NotImplementedException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public User GetById(int id)</div><div class="line">        &#123;</div><div class="line">            using (ISession session = NHibernateHelper.OpenSession())</div><div class="line">            &#123;</div><div class="line">                using (ITransaction transaction = session.BeginTransaction())</div><div class="line">                &#123;</div><div class="line">                    User user = session.Get&lt;User&gt;(id);</div><div class="line">                    transaction.Commit();</div><div class="line">                    return user;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public User GetByUsername(string username)</div><div class="line">        &#123;</div><div class="line">            using (ISession session = NHibernateHelper.OpenSession())</div><div class="line">            &#123;</div><div class="line">                using (ITransaction transaction = session.BeginTransaction())</div><div class="line">                &#123;</div><div class="line">                    //ICriteria criteria = session.CreateCriteria(typeof(User));</div><div class="line">                    //criteria.Add(Restrictions.Eq(&quot;Username&quot;, username));</div><div class="line">                    //User user = criteria.UniqueResult&lt;User&gt;();</div><div class="line">                    User user = session.CreateCriteria(typeof(User)).Add(Restrictions.Eq(&quot;Username&quot;, username)).UniqueResult&lt;User&gt;();</div><div class="line">                    return user;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void Remove(User user)</div><div class="line">        &#123;</div><div class="line">            using (ISession session = NHibernateHelper.OpenSession())</div><div class="line">            &#123;</div><div class="line">                using (ITransaction transaction = session.BeginTransaction())</div><div class="line">                &#123;</div><div class="line">                    session.Delete(user);</div><div class="line">                    transaction.Commit();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void Update(User user)</div><div class="line">        &#123;</div><div class="line">            using (ISession session = NHibernateHelper.OpenSession())</div><div class="line">            &#123;</div><div class="line">                using (ITransaction transaction = session.BeginTransaction())</div><div class="line">                &#123;</div><div class="line">                    session.Update(user);</div><div class="line">                    transaction.Commit();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public bool VerifyUser(string username, string password)</div><div class="line">        &#123;</div><div class="line">            throw new NotImplementedException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-然后我们就可以在Program里方便的增删改查了"><a href="#3-然后我们就可以在Program里方便的增删改查了" class="headerlink" title="3.然后我们就可以在Program里方便的增删改查了"></a>3.然后我们就可以在Program里方便的增删改查了</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> IUserManager userManager = new UserManager();</div><div class="line"> User user = userManager.GetByUsername(&quot;wer&quot;);</div><div class="line">// userManager.Update(user);</div><div class="line">Console.WriteLine(user.Username);</div><div class="line"> Console.WriteLine(user.Password);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-普通的链接，普通的增删改查，普通的代码&quot;&gt;&lt;a href=&quot;#一-普通的链接，普通的增删改查，普通的代码&quot; class=&quot;headerlink&quot; title=&quot;一.普通的链接，普通的增删改查，普通的代码&quot;&gt;&lt;/a&gt;一.普通的链接，普通的增删改查，普通的代码&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个故事讲完Https</title>
    <link href="http://yoursite.com/2017/07/29/%E4%B8%80%E4%B8%AA%E6%95%85%E4%BA%8B%E8%AE%B2%E5%AE%8CHttps/"/>
    <id>http://yoursite.com/2017/07/29/一个故事讲完Https/</id>
    <published>2017-07-29T04:27:57.000Z</published>
    <updated>2017-07-29T04:31:38.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在码农翻身看到一篇讲https的，生动易理解。整理一下分享给大家"><a href="#在码农翻身看到一篇讲https的，生动易理解。整理一下分享给大家" class="headerlink" title="在码农翻身看到一篇讲https的，生动易理解。整理一下分享给大家"></a>在码农翻身看到一篇讲https的，生动易理解。整理一下分享给大家</h2><h2 id="1-序言"><a href="#1-序言" class="headerlink" title="1/序言"></a>1/序言</h2><p>今天来聊一聊https 安全传输的原理。</p>
<p>在开始之前，我们来虚构两个人物， 一个是位于中国的张大胖（怎么又是你？！）， 还有一个是位于米国的Bill (怎么还是你？！)。</p>
<p>这俩哥们隔着千山万水，通过网络联系上了， 两个人臭味相投，聊得火热。</p>
<p>此时正值米国大选， 张大胖亲切地“致电”Bill, 对米国总统大选的情况表示强烈地关注。 Bill则回电说谢谢关心米国人的事情我们米国人自己做主，不用你们歪果仁瞎操心……</p>
<p>张大胖继续“致电”说其实我们支持特朗普， 因为希拉里太情绪化，太难打交道了， 我们挺希望看到特朗普上台这样米国就会变成 The Divided State of America ……</p>
<p>Bill 回电： 拉倒你吧你， 我们米国的政体有着强大的纠错性， 虽然有时候发展得慢， 有时候会走上岔路， 但很快就会回到正途，几百年来稳定得很，不像你们像坐了过山车一样…..</p>
<p>两个人越聊越投机，天南地北，海阔天空，还夹杂着不少隐私的话题。</p>
<h2 id="2-总是有一种被偷看的感觉"><a href="#2-总是有一种被偷看的感觉" class="headerlink" title="2/总是有一种被偷看的感觉"></a>2/总是有一种被偷看的感觉</h2><p>有一天， Bill 突然意识到： 坏了， 我们的通信是明文的， 这简直就是网络上裸奔啊， 任何一个不怀好意的家伙都可以监听我们通信，打开我们发送的数据包，窥探我们的隐私啊。</p>
<p>张大胖说： “你不早点说，我刚才是不是把我的微信号给你发过去了？ 我是不是告诉你我上周去哪儿旅游了?   估计已经被人截取了吧！”</p>
<p>Bill  提议： “要不我们做个数据的加密？ 每次传输之前， 你把消息用一个加密算法加密， 然后发到我这里以后我再解密， 这样别人就无法偷窥了，像这样： ”<br><img src="http://i1.buimg.com/1949/ade6db4481ac227a.png" alt="image"><br>张大胖冰雪聪明，一看就明白了， 这加密和解密算法是公开的，那个密钥是保密的， 只有两人才知道， 这样生成的加密消息（密文） 别人就无法得知了。 他说： “Bill 老兄，你生成一个密钥， 然后把密钥发给我， 咱们这就开启加密消息， 让那些偷窥狂人们哭去吧！”</p>
<p>（码农翻身注：这叫对称加密算法， 因为加密和解密用的是同一个密钥）</p>
<p>一炷香功夫过去了， Bill 还是没有回音， 张大胖忍不住地催促： “快发啊？！！！”</p>
<p>Bill 终于回复了： “ 我感觉有一双眼睛正在虎视眈眈地盯着我们的通话， 如果我把密钥发给你， 也被他截取了， 那加密岂不白费工夫？”</p>
<p>张大胖沉默了， 是啊， 网络是不安全的， 这密钥怎么安全地发过来啊 ？　</p>
<p>“奥，对了，我下周要去米国旅游，到时候我们见一面，把密码确定下来，写到纸上，谁也偷不走， 这不就结了？”　</p>
<p>“哈哈， 这倒是终极解决之道 ” Bill 笑了， “不过，我不仅仅和你聊天， 我还要和易卜拉欣，阿卜杜拉， 弗拉基米尔，克里斯托夫，玛格丽特， 桥本龙太郎， 李贤俊， 许木木，郭芙蓉，吕秀才等人通信， 我总不能打着飞的，满世界的和人交换密码吧？ ”</p>
<p>张大胖心里暗自佩服Bill同学的好友竟然遍布全球，看来他对加密通信的要求更加强烈啊！</p>
<p>可是这个加密解密算法需要的密钥双方必须得知道啊， 但是密钥又无法通过网络发送， 这该死的偷窥者！!</p>
<h2 id="RSA：非对称加密"><a href="#RSA：非对称加密" class="headerlink" title="RSA：非对称加密"></a>RSA：非对称加密</h2><p>Bill 和 张大胖的通信无法加密，说话谨慎了不少， 直到有一天， 他们听说了一个叫做RSA的非对称加密算法，一下子来了灵感。</p>
<p>这个RSA算法非常有意思，它不是像之前的算法， 双方必须协商一个保密的密钥， 而是有一对儿钥匙， 一个是保密的，称为私钥，另外一个是公开的，称为公钥。</p>
<p>更有意思的是，<strong>用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据， 只有对应的私钥才能解密。</strong><br><img src="http://i1.buimg.com/1949/5e8c39e7ca86956d.png" alt="image"><br>有了这两个漂亮的特性， 当张大胖给Bill发消息的时候， 就可以先用Bill的公钥去加密（反正Bill的公钥是公开的，地球人都知道）， 等到消息被Bill 收到后， 他就可以用自己的私钥去解密（只有Bill才能解开，私钥是保密的 ）<br><img src="http://i1.buimg.com/1949/43e126b0647a1475.png" alt="image"><br>反过来也是如此， 当Bill 想给张大胖发消息的时候，就用张大胖的公钥加密， 张大胖收到后，就用自己的私钥解密。</p>
<p>这样以来，通信安全固若金汤， 没有任何人能窥探他们的小秘密了。</p>
<h2 id="非对称加密-对称加密"><a href="#非对称加密-对称加密" class="headerlink" title="非对称加密+对称加密"></a>非对称加密+对称加密</h2><p>两人实验了几次， 张大胖说： “Bill , 你有没有感觉这个RSA的加密和解密有点慢啊？”</p>
<p>Bill叹了口气 ：“是啊， 我也注意到了， 刚才搜了一下，这个RSA算法比之前的对称密钥算法要慢上百倍。我们就是加个密而已，现在搞得都没法用了”</p>
<p>“回到咱们最初的问题，我们想用一个密钥来加密通信，那个对称加密算法是非常快的，但是苦于密钥无法安全传输， 现在有了RSA ,我想可以结合一下， 分两步走　(1) 我生成一个对称加密算法的密钥， 用RSA的方式安全发给你， (2) 我们随后就不用RSA了， 只用这个密钥，利用对称加密算法来通信, 如何？ ”</p>
<p>Bill 说： “你小子可以啊， 这样以来既解决了密钥的传递问题， 又解决了RSA速度慢的问题，不错。”　</p>
<p>于是两人就安全地传递了对称加密的密钥， 用它来加密解密，果然快多了！</p>
<h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>张大胖把和Bill 聊天的情况给老婆汇报了一次。</p>
<p>老婆告诫他说： “你要小心啊， 你确定网络那边坐着的确实是Bill ?”</p>
<p>张大胖着急地辩解说：“肯定是他啊，我都有他的公钥，我们俩的通信都是加密的。”</p>
<p>老婆提醒道：＂假如啊，Bill给你发公钥的时候， 有个中间人，截取了Bill的公钥， 然后把自己的公钥发给了你，冒充Bill ，你发的消息就用中间人的公钥加了密，　那中间人不就可以解密看到消息了？＂</p>
<p>张大胖背后出汗了，是啊，这个中间人解密以后，还可以用Bill的公钥加密，发给Bill , Bill和我根本都意识不到， 还以为我们在安全传输呢！<br><img src="http://i1.buimg.com/1949/a58bf0d069be1226.png" alt="image"><br><strong>看来问题出现在公钥的分发上！</strong> 虽然这个东西是公开的， 但是在别有用心的人看来，截取以后还可以干坏事 ！</p>
<h2 id="你到底是谁"><a href="#你到底是谁" class="headerlink" title="你到底是谁"></a>你到底是谁</h2><p>但是怎么安全地分发公钥呢？ 似乎又回到了最初的问题： 怎么安全的保护密钥？</p>
<p>可是似乎和最初的问题还不一样，这一次的公钥不用保密，但是一定得有个办法声明这个公钥确实是Bill的， 而不是别人的。</p>
<p>怎么声明呢？</p>
<p>张大胖突然想到： 现实中有公证处，它提供的公证材料大家都信任，那在网络世界也可以建立一个这样的具备公信力的认证中心， 这个中心给大家颁发一个证书， 用于证明一个人的身份。</p>
<p>这个证书里除了包含一个人的基本信息之外，还有包括最关键的一环：这个人的公钥！</p>
<p>这样以来我拿到证书就可以安全地取到公钥了 ！ 完美！</p>
<p>可是Bill 马上泼了一盆冷水：证书怎么安全传输？ 要是证书传递的过程中被篡改了怎么办？</p>
<p>张大胖心里不由地咒骂起来： 我操， 这简直就是鸡生蛋，蛋生鸡的问题啊。</p>
<p>天无绝人之路， 张大胖很快就找到了突破口： <strong>数字签名。</strong></p>
<p>简单来讲是这样的， Bill可以把他的公钥和个人信息用一个Hash算法生成一个消息摘要， 这个Hash算法有个极好的特性，<strong>只要输入数据有一点点变化，那生成的消息摘要就会有巨变</strong>，这样就可以防止别人修改原始内容。<br><img src="http://i1.buimg.com/1949/b1bb655d23b8c5cc.png" alt="image"><br>可是作为攻击者的中间人笑了： “虽然我没办法改公钥，但是我可以把整个原始信息都替换了， 生成一个新的消息摘要， 你不还是辨别不出来？”</p>
<p>张大胖说你别得意的太早 ， 我们会让有公信力的认证中心（<strong>简称CA</strong>）用它的私钥对消息摘要加密，形成签名：<br><img src="http://i1.buimg.com/1949/38d3543e8ee28c6e.png" alt="image"><br>这还不算， 还把原始信息和数据签名合并， 形成一个全新的东西，叫做“数字证书”<br><img src="http://i1.buimg.com/1949/e7a1c438c1108a01.png" alt="image"><br>张大胖接着说：当Bill把他的证书发给我的时候， 我就用同样的Hash 算法， 再次生成消息摘要，然后用CA的公钥对数字签名解密， 得到CA创建的消息摘要， 两者一比，就知道有没有人篡改了！</p>
<p>如果没人篡改， 我就可以安全的拿到Bill的公钥喽，有了公钥， 后序的加密工作就可以开始了。</p>
<p>虽然很费劲， 但是为了防范你们这些偷窥者，实在是没办法啊。<br><img src="http://i1.buimg.com/1949/495b3241682bbe98.png" alt="image"><br>中间人恶狠狠地说： “算你小子狠！ 等着吧，我还有别的招。 对了，我且问你， 你这个CA的公钥怎么拿到？　难道不怕我在你传输ＣＡ公钥的时候发起中间人攻击吗？　如果我成功的伪装成了ＣＡ，你这一套体系彻底玩完。”</p>
<p>张大胖语塞了，折腾了半天，又回到了公钥安全传输的问题！</p>
<p>不过转念一想，想解决鸡生蛋，蛋生鸡的问题必须得打破这个怪圈才行，我必须得信任ＣＡ，并且通过安全的的方式获取他们的公钥，这样才能把游戏玩下去。</p>
<p>（公众号码农翻身注：这些ＣＡ本身也有证书来证明自己的身份，并且ＣＡ的信用是像树一样分级的，高层的ＣＡ给底层的ＣＡ做信用背书，而操作系统／浏览器中会内置一些顶层的ＣＡ的证书，相当于你自动信任了他们。　这些顶层的ＣＡ证书一定得安全地放入操作系统／浏览器当中，否则世界大乱。）</p>
<h2 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h2><p>终于可以介绍https了，前面已经介绍了https的原理， 你把张大胖替换成浏览器， 把Bill 替换成某个网站就行了。</p>
<p>一个<strong>简化的</strong>（<strong>例如下图没有包含Pre-Master Secret</strong>）https流程图是这样的， 如果你理解了前面的原理，这张图就变得非常简单：<br><img src="http://i1.buimg.com/1949/ecbc530393f88118.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在码农翻身看到一篇讲https的，生动易理解。整理一下分享给大家&quot;&gt;&lt;a href=&quot;#在码农翻身看到一篇讲https的，生动易理解。整理一下分享给大家&quot; class=&quot;headerlink&quot; title=&quot;在码农翻身看到一篇讲https的，生动易理解。整理一下分
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用GitHub创建个人网站</title>
    <link href="http://yoursite.com/2017/07/14/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2017/07/14/如何利用Github搭建个人网站/</id>
    <published>2017-07-14T03:17:35.000Z</published>
    <updated>2017-07-29T05:04:37.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-搭建GitHub环境"><a href="#1-搭建GitHub环境" class="headerlink" title="1.搭建GitHub环境"></a>1.搭建GitHub环境</h2><p>首先注册Github账号<br>下载GIT，安装完成后打开Git Bash<br>在命令行输入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --<span class="keyword">global</span> user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --<span class="keyword">global</span> user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure></p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure></p>
<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可</p>
<p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容： 点“Add Key”，你就应该看到已经添加的Key，完成。</p>
<h3 id="在Github中新建-repository："><a href="#在Github中新建-repository：" class="headerlink" title="在Github中新建 repository："></a>在Github中新建 repository：</h3><blockquote>
<ul>
<li>Repository name为yourname.github.io      并把Public和README勾选上<br><img src="http://wx3.sinaimg.cn/mw690/006STR9mly1fhja6x7dg3j30m904jaa9.jpg" alt="此处输入图片的描述"></li>
</ul>
</blockquote>
<h3 id="在Git-Bash中配置："><a href="#在Git-Bash中配置：" class="headerlink" title="在Git Bash中配置："></a>在Git Bash中配置：</h3><pre><code class="python">$ git clone https://github.com/HelloChuang/HelloChuang.github.io.git
$ cd HelloChuang.github.io
$ echo <span class="string">"Hello World"</span> &gt; index.html 
$ git add --all
$ git commit -m <span class="string">"Initial commit"</span>
$ git push -u origin master
</code></pre>
<h3 id="Repository-Settings中"><a href="#Repository-Settings中" class="headerlink" title="Repository Settings中:"></a>Repository Settings中:</h3><blockquote>
<ul>
<li>将自己购买的域名填上<br><img src="http://wx3.sinaimg.cn/mw690/006STR9mly1fhja6yen7sj30mu04t3yj.jpg" alt="此处输入图片的描述"></li>
</ul>
</blockquote>
<h2 id="2-在万网的域名管理中："><a href="#2-在万网的域名管理中：" class="headerlink" title="2.在万网的域名管理中："></a>2.在万网的域名管理中：</h2><blockquote>
<ul>
<li>点击解析<img src="http://wx4.sinaimg.cn/mw690/006STR9mly1fhja6xrnnnj3075057a9w.jpg" alt="此处输入图片的描述"></li>
</ul>
<ul>
<li>ping一下  HelloChuang.github.io的ip   将解析的ip填进去，然后出来这个<img src="http://wx4.sinaimg.cn/mw690/006STR9mly1fhja6z1nwzj30yv04pdfx.jpg" alt="此处输入图片的描述"></li>
</ul>
</blockquote>
<p>  现在打开你的网站会提示404，最后一步，向本地库根目录（HelloChuang.github.io）中添加 一个名为CNAME的文件（不要后缀），文件内容为你的顶级域名。</p>
<p>  OK</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-搭建GitHub环境&quot;&gt;&lt;a href=&quot;#1-搭建GitHub环境&quot; class=&quot;headerlink&quot; title=&quot;1.搭建GitHub环境&quot;&gt;&lt;/a&gt;1.搭建GitHub环境&lt;/h2&gt;&lt;p&gt;首先注册Github账号&lt;br&gt;下载GIT，安装完成后打开G
    
    </summary>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/13/hello-world/"/>
    <id>http://yoursite.com/2017/07/13/hello-world/</id>
    <published>2017-07-13T09:54:19.609Z</published>
    <updated>2017-07-13T09:54:19.610Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
